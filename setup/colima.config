cpu: 4
disk: 60
memory: 12
arch: host
hostname: colima
autoActivate: true
forwardAgent: false

# I only tested this with 'docker', not 'containerd':
runtime: docker

kubernetes:
  enabled: false
  version: v1.24.3+k3s1
  k3sArgs: []

network:
  address: true
  dns: []
  dnsHosts:
    host.docker.internal: host.lima.internal

# Added:
# - containerd-snapshotter: true (meaning containerd will be used for pulling images)
docker:
  features:
    buildkit: true
    containerd-snapshotter: true

vmType: vz
rosetta: true
mountType: virtiofs
mountInotify: false
cpuType: host

# Custom provision scripts for the virtual machine.
provision:
  - mode: system
    script: |
      [ -f /etc/docker/daemon.json ] && echo "Already provisioned!" && exit 0
      echo "Installing system updates:"
      apt-get update -y
      apt-get upgrade -y
      echo "Installing dependency for wasmtime installer:"
      apt-get install -y xz-utils
      apt-get clean -y
  - mode: user
    script: |
      [ -f /etc/docker/daemon.json ] && echo "Already provisioned!" && exit 0
      #
      # Setting vars for this script:
      #
      # Which WASM runtimes to install (wasmedge, wasmtime and wasmer are supported):
      WASM_RUNTIMES="wasmedge wasmtime wasmer"
      #
      # Location of the containerd config file:
      CONTAINERD_CONFIG="/etc/containerd/config.toml"
      #
      # Target location for the WASM runtimes and containerd shims ($TARGET/bin and $TARGET/lib):
      TARGET="/usr/local"
      #
      # Install selected WASM runtimes and containerd shims:
      #
      [[ -z "${WASM_RUNTIMES// /}" ]] && echo "No WASM runtimes selected - exiting!" && exit 0
      echo "Installing WASM runtimes and containerd shims: ${WASM_RUNTIMES}:"
      sudo mkdir -p /etc/containerd/
      containerd config default | sudo tee $CONTAINERD_CONFIG >/dev/null
      for runtimeName in $WASM_RUNTIMES; do
        case $runtimeName in
          wasmedge)
            echo "Installing WasmEdge:"
            curl -sSfL https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | sudo bash -s -- -p $TARGET
            echo
            echo "`wasmedge -v` installed!"
            ;;
          wasmtime)
            echo "Installing wasmtime:"
            curl -sSfL https://wasmtime.dev/install.sh | bash
            sudo cp .wasmtime/bin/* ${TARGET}/bin/
            rm -rf .wasmtime
            echo "`wasmtime -V` installed!"
            ;;
          wasmer)
            echo "Installing wasmer:"
            curl -sSfL https://get.wasmer.io | sh
            sudo cp .wasmer/bin/* ${TARGET}/bin/
            sudo cp .wasmer/lib/* ${TARGET}/lib/
            rm -rf .wasmer
            echo "`wasmer -V` installed!"
            ;;
          *)
            echo "ERROR: WASM runtime $runtimeName is not supported!"
            exit 1
            ;;
        esac
        shimVersion=$(curl -s https://api.github.com/repos/containerd/runwasi/tags | grep tarball | grep "shim-${runtimeName}" | grep -Eo 'https://[^\"]*' | head -1 | tr "/" "\n" | tail -n 1)
        shimUrl="https://github.com/containerd/runwasi/releases/download/containerd-shim-${runtimeName}/${shimVersion}/containerd-shim-${runtimeName}-`uname -m`.tar.gz"
        echo "Installing runwasi shim version $shimVersion for $runtimeName runtime from ${shimUrl}:"
        curl -sSfL $shimUrl | sudo tar xvz -C ${TARGET}/bin/
        echo "[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.${runtimeName}]" | sudo tee -a $CONTAINERD_CONFIG >/dev/null
        echo "  runtime_type = \"io.containerd.${runtimeName}.v1\"" | sudo tee -a $CONTAINERD_CONFIG >/dev/null
      done
      echo "containerd WASM runtimes and shims installed."
      #
      # Restart the systemctl services to pick up the installed shims.
      # NOTE: We need to 'stop' docker because at this point the actual daemon.json config is not yet provisioned:
      #
      echo "Restarting/reloading docker/containerd services:"
      sudo systemctl daemon-reload
      sudo systemctl restart containerd
      sudo systemctl stop docker

sshConfig: true
mounts: []
env: {}
